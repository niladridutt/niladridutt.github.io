<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Niladri Shekhar Dutt</title>
        <link>https://niladridutt.com/posts/</link>
        <description>Recent content in Posts on Niladri Shekhar Dutt</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
        <lastBuildDate>Sun, 21 Jun 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://niladridutt.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Understanding deep learning requires rethinking generalization - A discussion</title>
            <link>https://niladridutt.com/posts/2020/06/understanding-deep-learning-requires-rethinking-generalization-a-discussion/</link>
            <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
            
            <guid>https://niladridutt.com/posts/2020/06/understanding-deep-learning-requires-rethinking-generalization-a-discussion/</guid>
            <description>Deep neural networks have been highly successful at a number of tasks; this paper takes a step back and looks at why such deep architectures have been successful. In deep neural networks more often than not, we have far more trainable parameters than the number of training examples and for some reason they seem to generalize very well despite violating the conventional rules of statistical learning. This paper seeks to understand generalization at a very fundamental level and tries to answer what causes a neural network to go beyond memorising labels and actually build intuitions about the underlying patterns in the data.</description>
            <content type="html"><![CDATA[<p>Deep neural networks have been highly successful at a number of tasks; this paper takes a step back and looks at why such deep architectures have been successful. In deep neural networks more often than not, we have far more trainable parameters than the number of training examples and for some reason they seem to generalize very well despite violating the conventional rules of statistical learning. This paper seeks to understand generalization at a very fundamental level and tries to answer what causes a neural network to go beyond memorising labels and actually build intuitions about the underlying patterns in the data.</p>
<p>In the first experiment, to probe this question, the authors do something quite interesting - they switch the labels in the training data to be completely random. At first this does not make sense but what’s really interesting is the fact that in spite of being trained on completely random data, the network achieves zero training error. Next they kept the labels the same but replaced the images with completely random pixels and yet again we see zero error during training. The authors argue that the effective capacity of large networks makes it possible to memorise even large datasets like CIFAR-10 since changing the labels to be random is essentially a data transformation.</p>
<br>
<p><img src="../../../../img/understanding-deep-learning-fig-1.jpeg" alt=""></p>
<br>
<p>Another notable finding is that when trained with partially corrupted labels, deeper networks had better test accuracy. The only qualm I have here is that the authors did not address the problem of overfitting well enough here.</p>
<p>The authors then discuss how neural networks have implicit regularization at play since even without explicit regularization methods like dropout and weight decay, neural networks are still able to achieve good enough generalization. Therefore, regularization can’t be the fundamental reason behind generalization.</p>
<br>
<p><img src="../../../../img/understanding-deep-learning-fig-2.jpeg" alt=""></p>
<br>
The authors conclude that effective capacity of deep neural networks are large enough to memorize data. Essentially neural networks are excellent to memorize input-output relationships. Yoshua Bengio et al in their paper “A Closer Look at Memorization in Deep Networks” explore this line of thought further. They find that at first neural networks identify simple patterns by exploiting training examples which have an easier input-output mapping. Once these simple patterns are identified, the neural networks start to memorize the dataset to completely overfit on the dataset. A similar line of work by Schwartz-Ziv and Tishby (“Opening the black box of Deep Neural Networks via Information”) try to explain some of these intuitions using information theory which I found quite interesting. They try to find how much mutual information is present at every activation layer. A truly remarkable insight which they present in their paper is about the training process of neural networks. In the first phase of the training process the network gains information about the label and the input. During the second phase, the network keeps gaining more information about the label but starts to lose information about the input which are irrelevant. This second phase which is much slower regularizes the network. 
<p><br><br></p>
<center><img src = "../../../../img/ib-dnn-fig-1.jpeg"></center>
<br>
<p><img src="../../../../img/9-Figure2-1.png" alt=""></p>
<br>
What really intrigued me in this paper by Zhang et al are the questions that the authors are asking which has led to a lot of interesting line of research. A recent paper by Chollet “On the Measure of Intelligence” talks about the need for a more definitive way to evaluate “intelligence” if we are to move towards AGI. I think understanding generalization at a fundamental level is the key to unlocking AGI.
<p><br><br></p>
]]></content>
        </item>
        
        <item>
            <title>A Hacker’s Guide to Winning Hackathons</title>
            <link>https://niladridutt.com/posts/2019/06/a-hackers-guide-to-winning-hackathons/</link>
            <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
            
            <guid>https://niladridutt.com/posts/2019/06/a-hackers-guide-to-winning-hackathons/</guid>
            <description>Hackathons are exhilarating. Nothing can eclipse the sheer adrenaline pump of building something in 24–36 hours. I was a visiting student at UC Berkeley for the Spring’19 semester. Berkeley is really close to the Silicon Valley and that gave me an amazing opportunity to take part in and win these 3 amazing hackathons:
  LA Hacks ’19 hosted by UCLA
  San Francisco DeveloperWeek Hackathon ’19 (America’s largest challenge-driven hackathon)</description>
            <content type="html"><![CDATA[<p><img src="../../../../img/1_R5UsPKWupQ3Gs5SmnRncaA.jpeg" style="float: left;" alt="image" width="350" height="350"><img src="../../../../img/1_jkqO3uF2j8bfzbV_c421mw.jpeg" style="float: right;" alt="image" width="300" height="350"></p>
<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>
<p>Hackathons are exhilarating. Nothing can eclipse the sheer adrenaline pump of building something in 24–36 hours. I was a visiting student at UC Berkeley for the Spring’19 semester. Berkeley is really close to the Silicon Valley and that gave me an amazing opportunity to take part in and win these 3 amazing hackathons:</p>
<ol>
<li>
<p>LA Hacks ’19 hosted by UCLA</p>
</li>
<li>
<p>San Francisco DeveloperWeek Hackathon ’19 (America’s largest challenge-driven hackathon)</p>
</li>
<li>
<p>SF Hacks ’19 (part of Major League Hacking)</p>
</li>
</ol>
<p>So, what did I learn from these hackathons in California and other hackathons I’ve won in India? Let’s talk about the strategies that helped me to win.</p>
<h2 id="the-team">The Team</h2>
<center><img src="../../../../img/0_8mrcIWNChJPGHKyM.jpg" alt="image"  ></center>
<p>Depending upon the hackathon, the team size may vary but most hackathons have a team limit of 4 people. The ‘Dream Team’ for me is to have one Front-End developer, a Back-End developer, ‘The guy who can do everything’ (this is the guy who knows Linux like the back of his/her hand) and someone who knows ML/Blockchain/IoT/AR/VR,etc.</p>
<h2 id="the-idea">‘The Idea’</h2>
<center><img src="../../../../img/0_-tFXmXGX5Mb2NGjj.jpeg" alt="image"  ></center>
<p>Your idea is what makes the product great even if you are not able to build it completely. Spend some serious amount of time thinking about a great idea which solves a real problem. If your idea does not solve a problem, then think of a new one which does! A product which actually solves a problem and has a social benefit will always win against something which is just cool (no matter how awesome it is). Once you are satisfied with the idea of what you want to build, chalk out the tech stack and create a project roadmap.</p>
<h2 id="what-does-not-work-in-a-hackathon">What does NOT work in a Hackathon</h2>
<center><img src="../../../../img/0_IHvI5lTdyT-AavtW.jpg" alt="image"  ></center>
<ul>
<li>
<p>Do not waste time by creating the most complicated neural network or the most meticulous smart contract. If there’s an API which does that, then use the API. There’s no brownie points for writing your own neural network rather than using an API from Google Cloud or AWS.</p>
</li>
<li>
<p>Avoid front-end frameworks if you’re not very comfortable with it. Old school HTML+CSS works just as good.</p>
</li>
<li>
<p>Do not add unnecessary features to your app or worse unnecessary technology if there’s no need to (a.k.a AI or blockchain). Keep it simple, stupid!</p>
</li>
<li>
<p>If there are multiple sponsor prizes in a hackathon, do not run after more than 3 or 4 prizes.</p>
</li>
<li>
<p>Live demos — I’ve seen so many perfectly working demos fail on stage that it’s almost a joke. Record a video or hardcode if you’re unsure!</p>
</li>
</ul>
<h2 id="what-works-in-a-hackathon">What works in a Hackathon</h2>
<center><img src="../../../../img/1_YXdt2zwef1B3DTJI0pZ8RQ.png" alt="image"></center>
<ul>
<li>
<p>How you are solving the problem is essential, research well.</p>
</li>
<li>
<p>React(HTML+CSS works just as good)+Firebase+AWS Lambda+TensorFlow = ❤</p>
</li>
<li>
<p>Deploy it on the cloud (localhost is fine too but if you want to show it on your mobile as well then cloud makes a lot more sense)</p>
</li>
<li>
<p>Focus on the front-end just as much as the back-end. The front-end is what everyone sees, so make it look good. There are a lot of things for which you don’t need a back-end and simple HTML does the job.</p>
</li>
<li>
<p>Use APIs!! (GCP and AWS probably has an API for everything you need — object detection, video analytics, NLP, ton of IoT stuff, Map, etc). In a hackathon, time is limited, use it wisely.</p>
</li>
<li>
<p>Be open to learning new things in a hackthon. Don’t be afraid to watch a tutorial on YouTube even if it’s for beginners. I had never worked on Amazon Alexa before but I learnt it in a few hours because we needed it.</p>
</li>
<li>
<p>If you’re using JSON payload then you can see if you’re making a successful post request by sending a post request to <a href="https://www.jsonstore.io/" target="_blank">https://www.jsonstore.io/</a>. Keep looking for hacks like these, it’s a hackathon after all! There a lot of neat tricks out there but that’ll almost be another long blog post.</p>
</li>
<li>
<p>It’s okay to catch a few hours of sleep (take turns to sleep since there’ll come a time when you’ll be waiting for your teammate to build his/her part of the product pipeline)</p>
</li>
<li>
<p>It’s fine to hard-code a particular functionality** **if things go south (just make sure you hide it really well :P)</p>
</li>
<li>
<p>**Know your judges — **(discussed later)</p>
</li>
</ul>
<h2 id="the-secret-sauce">The Secret Sauce</h2>
<center><img src="../../../../img/0_SCpaved0E7RxxFQs.jpg" alt="image"  ></center>
<p>The secret sauce is what makes a good product great. At SF Hacks we decided to build a platform where you can place everyday bets with your friend and the bet along with the wager is stored on the blockchain. What we had to essentially do was to automate the process of making smart contracts between 2 parties. Now, this is fine but it just did not have the oomph we were looking for. Enter Amazon Alexa.</p>
<p>We built an Amazon Alexa skill so that you can just talk to your Alexa and all the hard work (writing and deploying the smart contract on the Ethereum network) is automatically done behind the scenes. When we demoed this on stage, people found it really interesting. Not only was this cool but it made placing everyday bets on Ethereum really easy. No one wants to have an app or open a website to place a friendly bet but Alexa makes sense since it’s right there in your living room. Find a secret sauce for your product which truly highlights your product’s strength (in this case it was the convenience of placing a bet on the blockchain).</p>
<h2 id="the-pitch">The Pitch</h2>
<center><img src="../../../../img/0_v6yMXThKb49lKJHk.jpg" alt="image"  ></center>
<p>The product pitch is what makes or breaks your product. Do not try to make a presentation about your product (unless it’s a sponsor hackathon where you’re trying to solve a problem statement), let the product speak for itself (this is a hackathon, not a startup battlefield). The judges will only know what you tell them about your product, so if you know there’s a loose end in your product which might come up during Q&amp;A, then try to avoid it during the presentation.</p>
<p>If you have a product feature which keeps the audience interested in your pitch and makes the judge go ‘wow’ then there’s nothing quite like it. The key is to keep your pitch interesting and energetic! Do not bore the audience about the supercalifragilisticexpialidocious tech you’re using to solve the problem. Talk about the problem and give a walkthrough of your solution. Leave the tech jargon for the Q&amp;A session.</p>
<blockquote>
<h1 id="people-dont-want-a-quarter-inch-drill-they-want-a-quarter-inch-hole">“People don’t want a quarter inch drill, they want a quarter inch hole.”</h1>
</blockquote>
<h2 id="know-your-judges">Know your judges</h2>
<center><img src="../../../../img/0_DV0xAGWFQpETRT58.jpg" alt="image"  ></center>
<p>Knowing your audience is key and a hackathon is no different.</p>
<ul>
<li>
<p>That CTO guy — Talk is cheap. Show me the code.’ Talk about the complexities and the challenges you faced and how you overcame those challenges. Discuss about scalability and your design choices.</p>
</li>
<li>
<p>Judges who are Investors/Business people — They really want to see if your hack can make it big in the real world. Talk about the business model and how it benefits the society. Don’t talk numbers unless you’re sure.</p>
</li>
<li>
<p>The API Judge — They love it when you use a lot of creativity in making a non-core function extremely interesting a.k.a gamification. Integrate their API in a unique way and optimize it such that it almost unlocks a whole new possibility. Look for sponsor prizes most people would avoid.</p>
</li>
</ul>
<p>Selling is key. Convince the judges that your product is just what they are looking for. Fake it till you make it.</p>
<p>Winning is not everything but it feels good when you win :P</p>
<blockquote>
<h1 id="happy-hacking">Happy Hacking!</h1>
</blockquote>
<p><br><br></p>
]]></content>
        </item>
        
    </channel>
</rss>
